
#window keys
ESC, fire close program

#generic transform options
INSERT, Visible
DELETE, Invisible

HOME, UNUSED
END, UNUSED

PAGEUP, Scale+, bigger
PAGEDOWN, Scale-, Smaller

#movement options
LEFT, x-, move left, x_state = left, fire walking()
RIGHT, x+, move right, x_state = right, fire walking()
UP, y-, move up, y_state = rear, fire walking()
DOWN, y+, move down, y_state = fore, fire walking()

#object spevific render functions
KP_ENTER, UNUSED
KP_DIVIDE, record = pushes current frame onto stack, copy.copy(state{})
KP_PLUS, play = retrieves frames from stack in order, loops, cur_state = states[n]
KP_MULTIPLY, pause = stops on current frame, playing = false
KP_MINUS, clear = removes all frames, states = []obj = KP0, KP1, KP2, KP3, KP4, KP5, KP6, KP7, KP8, KP9
KP_PERIOD, places = resets to first frame, n = 0

#container selection
F1, Actors
F2, Cameras
F3, Props
F4, backgrounds

#container render functions
F5, record = pushes current frame onto stack, copy.copy(state{})
F6, play = retrieves frames from stack in order, loops, cur_state = states[n]
F7, pause = stops on current frame, playing = false
F8, clear = removes all frames, states = []

#general render functions
F9, places = resets to first frame, n = 0
F10, render = rescales everything to high resolution, 
			fires places, 
			fires play, 
			saves all images 000001.png, 
			scale = 1, visible_group.set_Scale(scale)

F11, debug
F12, cancel, stps rendering in place, reduces scale, fires places()

#regular keyboard
SPACE, mouth open - held
q-p, int based, "emotions" n_name
a-l, int based, "actions", n_name

ESC, takes you to main menu, exits in main menu


record
	list of dicts

	record()
	play()
	pause()
	reset() #places
	clear()

visible object
	record object

	has an imageset
	has a rect
	has record functionality

imgset
	list of images
	name
	handle scaling
	reloads images when scaled

group object
	record object

	has a set of visible objects
	has record functionality

main menu
	renderer button
	char_creat button

renderer
	menubar
		file
			load script
			save script
			import audio
			import image
			import imageset(animated)
			import actor
			import captions
	
			compile -> tries to render all images and audio into video file, returns error if no images

			exit


	selection interface
		list of all objects in currently selected group
		red square aorund currently selected object
		list of potential objects to select on right hand size

	screen
		center, ~1/4 size window
		stage
			groups:
				crew
					draw(surf):
						for object in objects.draworder():
							if object.collideswith(camera.get_rect()):
								draw(bg, (camera.get_rect()))
						camera.draw(surf)
				*objects
					draworder()
						temp_obj = objects.sortby(dist).remove(invisible)
						return objects
				actors(visible object)
				props(visible object)
				bgs(visible object)
			x,y = largest bg images
			rect
			draw():
				crew.draw(screen)


	current variables
		animation = bool
		steps = int
		focus = obj_name, if focused, non otherwise
		x_pos = int <= reletive to stage
		y_pos = int <= reletive to stage

	subtitle bar
		subtitles = [] <= parsed to fit
		when focused: left -, right +, current line
		when left or right key is pressed line is appened to script with timestamp

	statusbar
		FPS
		current render state [none, playing, recording(char|group), rendering(n%)]
		max frames


character creator
	menubar
		file
			load imageset(limbs)

			load rigging
			save rigging

			load cycle
			load state
			load super state

			save cycle
			save state
			save super state

			render cycle
			render state
			render super state

			exit


actors:
	controlled by F1
	animated imagesets
	mobile
	scalable
	state-dependent
	containers

cameras:
	controlled by F2
	rects
	ratio = 1080p*scale
	scaleable
	mobile
	clamped to stage

props:
	controlled by F3
	animated imagesets
	mobile
	scalable
	containers
	state-dependent

backgrounds:
	controlled by F4
	animated imagesets
	non-mobile - 





"""
substate prototypes
"""
class Substate:
	def __init__(self, width, height, listener):
		self.width = width
		self.height = height
		self.listener = listener

class ToolBar(Substate):
	def __init__(self, width, height, listener):
		Substate.__init__(self, width, height, listener)

class ScreenBar(Substate):
	def __init__(self, width, height, listener):
		Substate.__init__(self, width, height, listener)

class StatusBar(Substate):
	def __init__(self, width, height, listener):
		Substate.__init__(self, width, height, listener)

class CaptionBar(Substate):
	def __init__(self, width, height, listener):
		Substate.__init__(self, width, height, listener)

class ObjBar(Substate):
	def __init__(self, width, height, listener):
		Substate.__init__(self, width, height, listener)

class VaribleBar(Substate):
	def __init__(self, width, height, listener):
		Substate.__init__(self, width, height, listener)


"""
group prototypes
"""
class Group(pygame.sprite.Group):
	def __init__(self):
		pygame.sprite.Group.__init__(self)

class Guild(Group):
	def __init__(self):
		Group.__init__(self)

class Props(Group):
	def __init__(self):
		Group.__init__(self)

class Backgrounds(Group):
	def __init__(self):
		Group.__init__(self)

class Cameras(Group):
	def __init__(self):
		Group.__init__(self)

"""
object prototypes
"""

class Visible(pygame.sprite.Sprite):
	def __init__(self):
		pygame.sprite.Sprite.__init__(self)

class Actor(Visible):
	def __init__(self):
		Visible.__init__(self)
		
class Prop(Visible):
	def __init__(self):
		Visible.__init__(self)
		
class Background(Visible):
	def __init__(self):
		Visible.__init__(self)
		
class Camera(Visible):
	def __init__(self):
		Visible.__init__(self)